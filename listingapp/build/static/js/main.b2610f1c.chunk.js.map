{"version":3,"sources":["tabledata/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Tabledata","props","_","map","tableHeaders","header","index","categoryData","td","id","name","color","join","price","manufacturer","availability","Button","className","onClick","event","fetchAvailability","App","fetchCategories","categories","config","headers","forEach","category","axios","get","then","res","status","setState","currCategory","beanies","data","gloves","facemasks","fetchCGErrorMsg","catch","error","fetchAVErrorMsg","axiosPass","avErrorToken","clickedButton","document","getElementById","target","manufacturerAV","every","manufac","addAvailability","classList","contains","addProcessing","categoryButtons","querySelectorAll","button","disabled","removeProcessing","Array","isArray","response","push","console","log","setAvailability","tempCategory","product","AV","avData","toLowerCase","DATAPAYLOAD","match","stockRegex","state","setCategory","value","getCategory","elementName","clickedManufacButton","add","remove","componentDidMount","Container","Row","Col","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b2610f1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\nimport _ from 'lodash'\r\nimport '../App.css';\r\n\r\n//the table list component\r\n//Map the given props to generate table of data\r\nexport default function Tabledata(props){\r\n    \r\n    return(\r\n            <table>\r\n                <thead>\r\n                    <tr key=\"thead\">\r\n                        {_.map(props.tableHeaders, (header, index)=>{\r\n                            return (<th key={index}>{header}</th>)\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.categoryData ? _.map(props.categoryData,(td,index)=>{\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td>{td.id}</td>\r\n                            <td>{td.name}</td>\r\n                            <td>{td.color.join(\", \")}</td>\r\n                            <td>{td.price}</td>\r\n                            <td>{td.manufacturer}</td>\r\n                            {td.availability ? <td>{td.availability}</td> : <td><Button id={\"button\"+td.manufacturer+index} className={td.manufacturer} onClick={(event) => props.fetchAvailability(td.manufacturer, event)}>Fetch availability</Button></td>}\r\n                            \r\n                        </tr>\r\n                    )})\r\n                    :\r\n                    <td key=\"noData\"><tr>There was no category data. Try refresing page.</tr></td>\r\n                }\r\n                    \r\n                </tbody>\r\n            </table>\r\n    )\r\n}\r\n","/**\r\n * Author: Samuli Lehtonen\r\n * Date:27.02.2021\r\n * Summary: Listing app. Uses Axios to fetch categories and their data from api and listing them unsorted.\r\n */\r\nimport './App.css';\r\nimport React from 'react';\r\n//import axios\r\nimport axios from 'axios';\r\nimport TableData from './tabledata'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport _ from 'lodash'\r\n\r\nclass App extends React.Component{\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      currCategory: null,                                         //Name of the selected category\r\n      beanies: null,                                              //Beanies category\r\n      facemasks: null,                                            //Facemasks category\r\n      gloves: null,                                               //Gloves category\r\n      fetchAVErrorMsg: null,                                      //Error message for availability fetching\r\n      fetchCGErrorMsg: \"Data is being fetched. Wait a moment...\"  //Error message for category fetching\r\n      \r\n    }\r\n    this.stockRegex = /<INSTOCKVALUE>(.*)<\\/INSTOCKVALUE>/        //Regex to pick availavility from response\r\n    this.manufacturerAV= []                                       //To hold fetched manufacturers' availability\r\n    this.avErrorToken = false;                                           //Error token\r\n    this.categories = [\"gloves\", \"facemasks\", \"beanies\"]          //Categories to be fetched\r\n    \r\n  }\r\n\r\n  //1.fetch categories and save them in the state\r\n  fetchCategories = () =>{\r\n    let categories = this.categories\r\n    \r\n    let config = {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': \"*\",    //Pass CORS policy\r\n      }\r\n    }\r\n    categories.forEach((category) => {  \r\n       axios.get('https://bad-api-assignment.reaktor.com/v2/products/' + category, config)\r\n      .then(res=>{\r\n        if(res.status === 200){\r\n          switch(category){\r\n            case \"beanies\":\r\n              this.setState({\r\n                currCategory: \"beanies\",\r\n                beanies: res.data\r\n              });\r\n              return;\r\n            case \"gloves\":\r\n                this.setState({\r\n                gloves: res.data\r\n              });\r\n              return;\r\n            case \"facemasks\":\r\n              this.setState({\r\n                facemasks: res.data\r\n              });\r\n              return;\r\n            default:\r\n              return\r\n          }\r\n        }\r\n        else{\r\n          this.setState({\r\n            fetchCGErrorMsg: \"Server responsed with nothing. Try again by refreshing the page.\"\r\n          })\r\n        }\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          fetchCGErrorMsg: \"The requested server was unavailable. Try again by refreshing the page.\"\r\n        })\r\n      })\r\n      \r\n    });\r\n  }\r\n  //2.Fetch the availability information from the API afte button is clicked\r\n  //Params: \r\n  //  manufacturer == (string) selected manufacturer's name\r\n  //  event == (object) event object, in this case 'click'-event\r\n  fetchAvailability =  (manufacturer, event) =>{\r\n    let config = {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': \"*\",  //for passing CORS policy\r\n        'Access-Control-Allow-Methods': 'GET',\r\n        'Access-Control-Allow-Headers': 'Content-Type'\r\n      }\r\n    }\r\n    //reset errormsg\r\n    this.setState({\r\n      fetchAVErrorMsg: \"\"\r\n    })\r\n    \r\n    let axiosPass = true; //Token for axios.get\r\n    this.avErrorToken = false; //Reset error token\r\n    let clickedButton = document.getElementById(event.target.id) //Clicked fetching button\r\n\r\n    // check if manufacturer is already fetched before\r\n    // Only necessary check if fetching was succesfull but rerendering wasn't and fetching is tried again\r\n    this.manufacturerAV.every(manufac =>{\r\n      if(manufac.manufacturer === manufacturer){\r\n        axiosPass = false;\r\n        this.addAvailability(manufacturer)\r\n        return false;\r\n      }\r\n      return true;\r\n    })\r\n\r\n    \r\n    if(axiosPass && !clickedButton.classList.contains(\"processing\")){ //Check if axiosPass is true and the clicked button isn't already processing get request\r\n      this.addProcessing(\"button\", manufacturer)\r\n      axios.get('https://bad-api-assignment.reaktor.com/v2/availability/'+ manufacturer, config)\r\n      .then(res => {\r\n\r\n        //Remove disabled from category buttons and fetching buttons\r\n        let categoryButtons = document.querySelectorAll(\"button\")\r\n        _.forEach(categoryButtons, button =>{\r\n          if(button.classList.contains(\"categoryButton\")){button.disabled = false}\r\n        })\r\n        this.removeProcessing(\"button\", manufacturer)\r\n\r\n        if(res.status === 200){\r\n          if(Array.isArray(res.data.response)){\r\n            this.manufacturerAV.push({\"manufacturer\": manufacturer, \"data\": res.data.response}) //save the response as an object to array        \r\n          }else{ \r\n            this.setState({\r\n              fetchAVErrorMsg: \"Fetching received nothing. Try again.\" //if received nothing, show error message\r\n            })\r\n            this.avErrorToken = true\r\n          }\r\n        }else if(res.status === 404){\r\n          this.setState({\r\n            fetchAVErrorMsg: \"Availability of the manufacturer's product wasn't found. Try again.\"\r\n          })\r\n          this.avErrorToken = true\r\n        }else if(res.status === 503){\r\n          this.setState({\r\n            fetchAVErrorMsg: \"Server was unavailable. Try again.\"\r\n          })\r\n          this.avErrorToken = true\r\n        }\r\n      }).then(()=> !this.avErrorToken && this.addAvailability(manufacturer))\r\n      .catch(error =>{\r\n        this.removeProcessing(\"button\", manufacturer)\r\n        this.setState({\r\n          fetchAVErrorMsg: \"Server was unavailable. Try again.\"\r\n        })\r\n        return console.log(error)\r\n      })\r\n    }\r\n    return\r\n  }\r\n\r\n  setAvailability = (category,manufacturer) =>{\r\n    let manufacturerAV = this.manufacturerAV\r\n    let tempCategory = category\r\n    _.forEach(tempCategory,(product, index)=>{ //Map through category and availability data\r\n      \r\n      _.forEach(manufacturerAV,AV=>{\r\n        AV.manufacturer === manufacturer && _.forEach(AV.data, avData =>{ //when wanted manufacturer is founf map through the availability data of the manufacturer\r\n          if(product.id === avData.id.toLowerCase()){\r\n            \r\n            tempCategory[index].availability = avData.DATAPAYLOAD.match(this.stockRegex)[1]\r\n          }\r\n        })\r\n      })\r\n    })\r\n    return tempCategory\r\n  }\r\n\r\n  //3.Function for finding the correct availability for selected product\r\n  //\r\n  //params: \r\n  //  manufacturer == (string) selected manufacturer's name\r\n  addAvailability =  (manufacturer) =>{\r\n    // let manufacturerAV = this.manufacturerAV\r\n    switch(this.state.currCategory){\r\n      case \"beanies\":\r\n        let beanies = this.setAvailability(this.state.beanies,manufacturer)\r\n        this.setState({\r\n          beanies: beanies\r\n        })\r\n        return\r\n      case \"facemasks\":\r\n        let facemasks = this.setAvailability(this.state.facemasks,manufacturer)\r\n        this.setState({\r\n          facemasks: facemasks\r\n        })\r\n        return \r\n      case \"gloves\":\r\n        let gloves = this.setAvailability(this.state.gloves,manufacturer)\r\n        this.setState({\r\n          gloves: gloves\r\n        })\r\n        return \r\n      default:\r\n        return <p>No current caregory selected. Try pressing the button or reload the window</p>\r\n    }\r\n  }\r\n\r\n  /*Utility functions*/\r\n\r\n  //Set current category\r\n  setCategory = (category) => {\r\n    this.setState({\r\n      currCategory: category.target.value\r\n    })\r\n  }\r\n  //getter: Get wanted category\r\n  getCategory = (category) =>{\r\n    switch(category){\r\n      case \"beanies\":\r\n        return this.state.beanies;\r\n      case \"facemasks\":\r\n        return this.state.facemasks\r\n      case \"gloves\":\r\n        return this.state.gloves\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n  //Add processing class to an element and disable categorybuttons and selected manufacturer's availability fetching buttons\r\n  addProcessing = (elementName, manufacturer)=>{\r\n    let clickedManufacButton = document.querySelectorAll(elementName)\r\n        _.forEach(clickedManufacButton, button =>{\r\n          if(button.classList.contains(manufacturer)){\r\n            button.classList.add(\"processing\"); \r\n            button.disabled = true;\r\n          }\r\n          if(button.classList.contains(\"categoryButton\")){button.disabled = true}\r\n        })\r\n  }\r\n    //Remove processing class from an element and enable categorybuttons and selected manufacturer's availability fetching buttons\r\n  removeProcessing = (elementName, manufacturer)=>{\r\n    let clickedManufacButton = document.querySelectorAll(elementName)\r\n        _.forEach(clickedManufacButton, button =>{\r\n          if(button.classList.contains(manufacturer)){button.classList.remove(\"processing\");button.disabled = false }\r\n          if(button.classList.contains(\"categoryButton\")){button.disabled = false}\r\n        })\r\n  }\r\n/*End of utility functions*/\r\n\r\n  componentDidMount = () => {\r\n    this.fetchCategories()\r\n  }\r\n  render(){\r\n    return(\r\n      <Container>\r\n        <Container className=\"C-B-Container\">\r\n          <h3>Select a category</h3>\r\n          <Row className=\"categoryButtons\">\r\n            <Col>\r\n              <Button className=\"categoryButton\" value=\"beanies\" id=\"getBeaniesButton\" onClick={this.setCategory}>Beanies</Button>\r\n              <Button className=\"categoryButton\" value=\"facemasks\" id=\"getFacemasksButton\" onClick={this.setCategory}>Facemasks</Button>\r\n              <Button className=\"categoryButton\" value=\"gloves\" id=\"getGlovesButton\" onClick={this.setCategory}>Gloves</Button>\r\n              {\r\n                this.state.fetchAVErrorMsg && <span id=\"avErrorSpan\">{this.state.fetchAVErrorMsg}</span>  //Show error message if Availability fetching failed somehow\r\n              }      \r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Row className=\"table\">\r\n          <Col>\r\n            {this.state.currCategory == null ? //show error message of category fetching or the table of the categories\r\n            <h3 id=\"cgErrorH3\">{this.state.fetchCGErrorMsg}</h3>\r\n            :\r\n            <TableData \r\n              tableHeaders={[\"ID\", \"Name of \"+this.state.currCategory, \"Color(s)\", \"Price €\", \"Manufacturer\", \"Availability\"]} //table headers\r\n              categoryData={this.getCategory(this.state.currCategory)} //category data\r\n              fetchAvailability={this.fetchAvailability} //passed function for buttons to fetch availability\r\n              />\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n        \r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}